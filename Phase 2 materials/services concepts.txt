Service

Service is a piece of reusable code with a focused purpose. Code ==> used in many components across application

Components ==> access the data. 
Component ==> focus on presenting data to the user
Getting data from the back-end server ==> delegated to some other class ==> Service class. Service ==> class ==> purpose of Providing a Service to a Component, Directive, or to another Service.

Services are used for
Features that are independent of components such a logging services
Share logic or data across components
Encapsulate external interactions like data access

Advantageous of Angular Service
Services are easier to test.
They are easier to Debug.
We can reuse the service at many places.


Dependency Injection

Dependency injection  ==> Inject dependencies into the Component, Directives, Pipes, or Services

Dependency Injection ==> Technique ==> class receives its dependencies from external sources rather than creating them itself.

There are five main players in the Angular Dependency injection Framework.

Consumer
The Consumer is the class (Component, Directive, or Service) that needs the Dependency. 

Dependency
The Service that we want to in our consumer. 

Injection Token (DI Token)
The Injection Token (DI Token) uniquely identifies a Dependency. DI Token when  registering dependency

Provider
The Providers Maintain the list of Dependencies along with their Injection Token. It uses the Injection Token to identify the Dependency.  

Injector
Injector holds the Providers and is responsible for resolving the dependencies and injecting the instance of the Dependency to the Consumer

The Injector uses Injection Token to search for Dependency in the Providers. It then creates an instance of the dependency and injects it into the consumer

----------------------

Registering the Dependency with the Injector
Angular Provides an instance of Injector & Provider to every component & directive in the application ( Consumers). It also creates an Injector instance at the module level and also at the root of the application. Basically, it creates a Tree of Injectors with parent-child relationship 

The dependencies are registered with the Provider. This is done in the Providers metadata of the Injector.

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  providers: [XYZService]
})

OR

@NgModule({
  declarations: [...],
  imports: [...],
  providers: [XYZService],
  bootstrap: []
})

Tell angular that our component needs dependency injection. This is done by using the @Injectable() decorator.

@Injectable() decorator is not needed if the class already has other Angular decorators like @Component, @pipe or @directive etc. Because all these are a subtype of Injectible.

------------------------

Asking for Dependency in the Constructor
The Components, Directives & Services (Consumers) declare the dependencies that they need in their constructor.

constructor(private productService:ProductService) { 
}
 
Injector reads the dependencies from the constructor of the Consumer. It then looks for that dependency in the provider. The Provider provides the instance and injector, then injects it into the consumer.

If the instance of the Dependency already exists, then it will reuse it. This will make the dependency singleton.

same code will execute with DI in work

--------------------------

Injecting Service into Another Service

Build loggerService ==> logs every operation into console ==> inject it into XYZService.

Create the logger.service.ts and add the following code

import { Injectable } from '@angular/core';
 
@Injectable()
export class LoggerService {
  log(message:any) {
    console.log(message);
  }
}

Inject  ==> XYZService class ==> needs loggerService to be injected. Hence the class requires @Injectible metadata
 
@Injectable()
export class XYZService{}
 
Constructor XYZService ==> ask for the loggerService.
 
constructor(private loggerService: LoggerService) {
    this.loggerService.log("XYZ Service Constructed");
}
 
Add Logger Service actions

 public  methodnameinService() {
 
        this.loggerService.log("method called");
 
        this.loggerService.log(items);

    }
 
Register LoggerService with the Providers metadata. Providing the service in the root module will create a single, shared instance of service and injects into any class that asks for it.

app.module.ts
providers: [XYZService,LoggerService]

OR 

using the ProvidedIn is the preferred way to provide a service in a module
No need for using it in app.module

providers: [LoggerService]
@Injectable({
  providedIn:'root'
})
----------------------
Service Scope
The services that we provide at the root module are app-scoped, which means that we can access them from every component/service within the app.

Any service provided in the other Modules (Other than the Lazy Loaded Module) is also available for the entire application.

The services that are provided in a Lazy Loaded Module are module scoped and available only in the Lazy loaded module.

The services provided at the Component level are available only to the Component & and to the child components.
